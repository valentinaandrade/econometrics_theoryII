textsize = "13px",
direction = "auto")) %>%
addLegend( pal=mypalette, values=~num_universidades, opacity=0.9, title = "Institutions participants", position = "bottomleft" )
geo
here::here()
states <- geojsonio::geojson_read("custom.geo.json", what = "sp")
pacman::p_load(geojsonio)
states <- geojsonio::geojson_read("custom.geo.json", what = "sp")
class(states)
names(states)
# Fusionar los datos con el objeto geo
map2 <- merge(states, data, by.x = "NAME", by.y = "country_unico")
names(states@data$sovereignt)
table(states@data$sovereignt)
# Fusionar los datos con el objeto geo
map2 <- merge(states, data, by.x = "sovereignt", by.y = "country_unico")
mybins <- c(0,0.5,0.7,0.9, 1, 1.3,1.4, Inf)
mypalette <- colorBin( palette=c("#0099CC", "white","magenta4"), domain=map2@data$num_universidades, na.color="transparent", bins=mybins)
map2@data$NAME <- map2@data$sovereignt
# Prepare the text for tooltips:
mytext <- paste(
"<b>", map2@data$NAME,"</b>","<br/>",
"U: ", map2@data$university,"<br/>",
sep="") %>%
lapply(htmltools::HTML)
# Final Map
leaflet(map2) %>%
addTiles(providers$Stamen.TonerLite)  %>%
setView(lat=10, lng=0 , zoom=2) %>%
addPolygons(
fillColor = ~mypalette(num_universidades),
stroke=TRUE,
fillOpacity = 0.9,
color="black",
weight=0.3,
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto")) %>%
addLegend( pal=mypalette, values=~num_universidades, opacity=0.9, title = "Institutions participants", position = "bottomleft" )
# Download the shapefile. (note that I store it in a folder called DATA. You have to change that if needed.)
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip", destfile = "DATA/world_shape_file.zip")
# Unzip this file. You can do it with R (as below), or clicking on the object you downloaded.
system("unzip DATA/world_shape_file.zip")
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv")
df
plot_ly(df, type='choropleth', locations=df$CODE, z=df$GDP..BILLIONS., text=df$COUNTRY, colorscale="Blues")
plot_ly(data, type='choropleth', locations=df$CODE, z=df$num_universidades, text=df$COUNTRY, colorscale="Blues")
plot_ly(data, type='choropleth', locations=df$COUNTRY, z=df$num_universidades, text=df$COUNTRY, colorscale="Blues")
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
View(df)
View(df)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv') %>%
mutate(country = COUNTRY)
df <- left_join(data, df, by)
df <- left_join(data, df)
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
fig <- plot_geo(df)
df <- left_join(data, df) %>%
mutate(num_uni = if_else(is.na(country_unico), NA_real_, num_uni))
df <- left_join(data, df) %>%
mutate(num_uni = if_else(is.na(country_unico), NA_real_, num_universidades))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
fig <- plot_geo(df)
fig <- fig %>% add_trace(
z = ~num_uni, color = ~num_uni, colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
)
fig
data <- mutate(data,
country = if_else(country == "USA", "United States of America", country))
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv') %>%
mutate(country = COUNTRY)
df <- left_join(data, df) %>%
mutate(num_uni = if_else(is.na(country_unico), NA_real_, num_universidades))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
fig <- plot_geo(df)
fig <- fig %>% add_trace(
z = ~num_uni, color = ~num_uni, colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
)
fig
data <- mutate(data,
country = if_else(country == "USA", "United States", country))
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv') %>%
mutate(country = COUNTRY)
View(data)
##### Location Names
Location <- c("Atlanta ","Los Angeles","Chicago","New York","Dallas","Baltimore","Phoenix","Charlotte","Houston","San Antonio", "Seattle" )
#### Latitude and Longitude values for each of the above location
Lat <- c(33.74401,33.82377,41.78798,40.767309,32.88153,39.148492,33.45444,35.2406,29.935842,29.44838,47.714965 )
Lon <- c(-84.56032,-118.2668,-87.7738,-73.978308,-96.64601,-76.796211,-112.32401,-81.04028,-95.398436,-98.39908,-122.127166 )
#### Some hypothetical number of orders shipped out of each location
Orders <- c(1992,2500,3600,2252,3650,3450,4145,3945,5050,4300,1987)
#### Let us create some hypothetical class flags for the cities
Type <- c(rep("Yoda",5),rep("Vader",6))
### Create data set from the above vectors
df <- data.frame(Location, Lat,Lon,Orders,Type)
mymap <- leaflet() %>% addTiles()
mymap <- mymap %>%
addTiles(
'http://otile{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.jpeg',
attribution = 'Tiles Courtesy of <a href="http://www.mapquest.com/">MapQuest</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
) %>% setView(-97, 40, zoom = 4)
mymap %>%
addMarkers(data = df, lng = ~Lon, lat = ~Lat,
icon = list(
iconUrl = 'http://icons.iconarchive.com/icons/artua/star-wars/128/Master-Joda-icon.png',
iconSize = c(75, 75)
))
# Crear un nuevo vector de países corregido
countries_corrected <- c("United States", "United States", "United States", "United States", "United States", "United States", "United States", "United States", "United States", "France", "Canada", "United States",
"United States", "United States", "Spain", "UAE", "United States", "United Kingdom", "United States", "Colombia", "Chile", "Chile", "Italy",
"Germany", "Sweden", "United Kingdom", "Brazil", "Brazil", "Chile", "United States", "United States", "Mexico", "Colombia",
"Chile", "Chile", "Italy", "United States", "Belgium", "United Kingdom", "United States", "United States", "United States", "Peru",
"United States", "Chile", "United States", "Chile", "Colombia", "Argentina", "Singapore",
"United States", "United States", "Brazil", "United States", "United States", "Colombia", "Canada")
# Crear el data frame
universities_df <- data.frame(university = university, country = countries, countries_corrected)
# Crear un nuevo vector de países corregido
countries_corrected <- c("United States", "United States", "United States", "United States", "United States", "United States", "United States", "United States", "United States", "France", "Canada", "United States",
"United States", "United States", "Spain", "UAE", "United States", "United Kingdom", "United States", "Colombia", "Chile", "Chile", "Italy",
"Germany", "Sweden", "United Kingdom", "Brazil", "Brazil", "Chile", "United States", "United States", "Mexico", "Colombia",
"Chile", "Chile", "Italy", "United States", "Belgium", "United Kingdom", "United States", "United States", "United States", "Peru",
"United States", "Chile", "United States", "Chile", "Colombia", "Argentina", "Singapore",
"United States", "United States", "Brazil", "United States", "United States", "Colombia", "Canada")
# Verificar la longitud del nuevo vector de países
length(countries_corrected)
UIUC
university <- c("Harvard", "MIT", "UC Berkeley", "Northwestern", "Chicago", "Stanford", "Cornell",
"UPenn-Wharton", "IADB", "Toulouse", "UBC", "Brown", "UC Santa Barbara",
"Vanderbilt", "Carlos III", "NYU Abu Dhabi", "Georgetown", "Queen Mary",
"Virginia", "Los Andes (Colombia)", "Pontificia Universidad Católica de Chile", "Universidad de Chile",
"Free University of Bozen-Bolzano", "University of Potsdam", "Stockholm University",
"London School of Economics and Political Science (LSE)", "University of São Paulo (USP)",
"Insper", "Universidad Diego Portales", "Pennsylvania State University (Penn State)",
"Federal University of Paraná (UFPR)", "University of Illinois at Chicago (UIC)",
"Instituto Tecnológico Autónomo de México (ITAM)", "Central Bank of Colombia",
"Central Bank of Chile", "Universidad de los Andes Chile", "World Bank",
"Johns Hopkins University", "KU Leuven (Katholieke Universiteit Leuven)",
"London Business School", "University of Wisconsin-Madison", "Microsoft Corporation",
"Universidad del Pacífico (Peru)", "Development Bank of Latin America (CAF)",
"3IE - USM", "George Mason University", "Universidad Adolfo Ibáñez (UAI)",
"Universidad del Rosario (Colombia)", "Universidad EAFIT (Colombia)",
"Universidad Torcuato Di Tella (Argentina)", "Singapore Management University (SMU)",
"University of California, Santa Cruz (UC Santa Cruz)",
"University of California, San Diego (UC San Diego)", "University of Brasília (UnB)",
"Georgia Institute of Technology (Georgia Tech)",
"University of Illinois at Urbana-Champaign (UIUC)", "Wilfrid Laurier")
# Crear un vector con los países correspondientes a cada universidad
countries <- c("United States", "United States", "United States", "United States", "United States", "United States", "United States", "United States", "United States", "France", "Canada", "United States",
"United States", "United States", "Spain", "UAE", "United States", "United Kingdom", "United States", "Colombia", "Chile", "Chile", "Italy",
"Germany", "Sweden", "United Kingdom", "Brazil", "Brazil", "Chile", "United States", "United States", "Mexico", "Colombia",
"Chile", "Chile", "Italy", "United States", "Belgium", "United Kingdom", "United States", "United States", "United States", "Peru",
"United States", "Chile", "United States", "Chile", "Colombia", "Argentina", "Singapore",
"United States", "United States", "Brazil", "United States", "United States", "Colombia", "Canada")
# Corregir los países correspondientes a U del Rosario y UAI
countries[which(university == "Universidad del Rosario (Colombia)")] <- "Colombia"
countries[which(university == "Universidad Adolfo Ibáñez (UAI)")] <- "Chile"
# Crear el data frame
universities_df <- data.frame(university = university, country = countries, countries_corrected)
View(universities_df)
# Agregar la columna de continente
universities_df$continent <- countrycode(universities_df$country, "country.name", "continent")
db <- universities_df %>%
mutate(continent  = if_else(is.na(continent), "Americas", continent))
# Definir los datos de la tabla como vectores
university <- c("Harvard", "MIT", "UC Berkeley", "Northwestern", "Chicago", "Stanford", "Cornell",
"UPenn-Wharton", "IADB", "Toulouse", "UBC", "Brown", "UC Santa Barbara",
"Vanderbilt", "Carlos III", "NYU Abu Dhabi", "Georgetown", "Queen Mary",
"Virginia", "Pontificia Universidad Católica de Chile", "Pontificia Universidad Católica de Chile", "Universidad de Chile",
"Free University of Bozen-Bolzano", "University of Potsdam", "Stockholm University",
"London School of Economics and Political Science (LSE)", "University of São Paulo (USP)",
"Insper", "Universidad Diego Portales", "Pennsylvania State University",
"Federal University of Paraná (UFPR)", "University of Illinois at Chicago (UIC)",
"Instituto Tecnológico Autónomo de México (ITAM)", "Universidad de los Andes (Colombia)",
"Pontifical Catholic University of Chile",  # Aquí eliminamos la duplicación
"Central Bank of Colombia", "Central Bank of Chile", "Los Andes (Colombia)",
"World Bank", "Johns Hopkins University", "KU Leuven (Katholieke Universiteit Leuven)",
"London Business School", "University of Wisconsin-Madison", "Microsoft Corporation",
"Universidad del Pacífico (Peru)", "Development Bank of Latin America (CAF)",
"3IE - USM", "George Mason University",
"Universidad Adolfo Ibáñez (UAI)", "Universidad del Rosario (Colombia)",
"Universidad EAFIT (Colombia)", "Universidad Torcuato Di Tella (Argentina)",
"Singapore Management University (SMU)", "University of California, Santa Cruz (UC Santa Cruz)",
"University of California, San Diego (UC San Diego)", "University of Brasília (UnB)",
"Georgia Institute of Technology (Georgia Tech)", "University of Illinois at Urbana-Champaign (UIUC)",
"Wilfrid Laurier", "Universidad de los Andes Chile")
latitud <- c(42.3736, 42.3601, 37.8719, 42.0555, 41.7897, 37.4275, 42.4470, 39.9526, 38.9059, 43.5624, 49.2606,
41.8262, 34.4133, 36.1447, 40.3327, 24.4709, 38.9076, 51.5246, 38.0356, -4.6021, -33.4496, -33.4542,
46.4983, 52.3914, 59.3650, 51.5142, -23.5619, -23.5842, -33.4394, 40.7982, -25.4275, 41.8696, 19.3600,
-4.6021, -33.4542, 4.6368, -33.4418, -4.6020, 38.9072, 39.3299, 50.8798, 51.5194, 43.0761, 47.6435,
-12.0810, 10.4880, -33.4504, 38.8318, -33.4458, -4.5981, -6.2004, -34.5328, 1.2966, 36.9915, 32.8801,
-15.7644, 33.7756, 40.1020, 43.4723, -33.4040)
longitud <- c(-71.1097, -71.0942, -122.2585, -87.6752, -87.5997, -122.1697, -76.4835, -75.1652, -77.0424, 1.4683,
-123.2458, -71.4032, -119.8489, -86.8027, 3.7682, 54.3735, -77.0723, 0.0399, -78.5031, -74.0650,
-70.6646, -70.6342, 11.3543, 13.1287, 18.0697, 0.1165, -46.7300, -46.6721, -70.6505, -77.8599,
-49.2733, -87.6496, -99.1836, -74.0650, -70.6342, -74.0825, -70.6541, -74.0650, -77.0369, -76.6205,
4.7005, 0.1270, -89.4125, -122.1306, -77.0244, -66.8792, -70.6565, -77.3110, -70.6250, -74.0760,
-75.5788, -58.5039, 103.8522, -122.0609, -117.2340, -47.8681, -84.3963, -88.2272, -80.5449, -70.5075)
# Crear el dataframe
df <- data.frame(university = university,
latitud = latitud,
longitud = longitud)
# Mostrar el dataframe
print(df)
data <- merge(db, df, by = "university", all = T)
View(data)
# Crear un nuevo vector de países corregido
# Crear un nuevo vector de países corregido
countries_corrected <- c("United States", "United States", "United States", "United States", "United States", "United States", "United States", "United States", "United States", "France", "Canada", "United States",
"United States", "United States", "Spain", "UAE", "United States", "United Kingdom", "United States", "Colombia", "Chile", "Chile", "Italy",
"Germany", "Sweden", "United Kingdom", "Brazil", "Brazil", "Chile", "United States", "United States", "Mexico", "Colombia",
"Chile", "Chile", "Italy", "United States", "Belgium", "United Kingdom", "United States", "United States", "United States", "Peru",
"United States", "Chile", "United States", "Chile", "Colombia", "Argentina", "Singapore",
"United States", "Belgium", "United Kingdom", "United States", "United States", "United States", "Colombia")
# Verificar la longitud del nuevo vector de países
length(countries_corrected)
# Crear el data frame
universities_df <- data.frame(university = university, country = countries, countries_corrected)
# Agregar la columna de continente
universities_df$continent <- countrycode(universities_df$country, "country.name", "continent")
db <- universities_df %>%
mutate(continent  = if_else(is.na(continent), "Americas", continent))
# Definir los datos de la tabla como vectores
university <- c("Harvard", "MIT", "UC Berkeley", "Northwestern", "Chicago", "Stanford", "Cornell",
"UPenn-Wharton", "IADB", "Toulouse", "UBC", "Brown", "UC Santa Barbara",
"Vanderbilt", "Carlos III", "NYU Abu Dhabi", "Georgetown", "Queen Mary",
"Virginia", "Pontificia Universidad Católica de Chile", "Pontificia Universidad Católica de Chile", "Universidad de Chile",
"Free University of Bozen-Bolzano", "University of Potsdam", "Stockholm University",
"London School of Economics and Political Science (LSE)", "University of São Paulo (USP)",
"Insper", "Universidad Diego Portales", "Pennsylvania State University",
"Federal University of Paraná (UFPR)", "University of Illinois at Chicago (UIC)",
"Instituto Tecnológico Autónomo de México (ITAM)", "Universidad de los Andes (Colombia)",
"Pontificia Universidad Católica de Chile",  # Aquí eliminamos la duplicación
"Central Bank of Colombia", "Central Bank of Chile", "Los Andes (Colombia)",
"World Bank", "Johns Hopkins University", "KU Leuven (Katholieke Universiteit Leuven)",
"London Business School", "University of Wisconsin-Madison", "Microsoft Corporation",
"Universidad del Pacífico (Peru)", "Development Bank of Latin America (CAF)",
"3IE - USM", "George Mason University",
"Universidad Adolfo Ibáñez (UAI)", "Universidad del Rosario (Colombia)",
"Universidad EAFIT (Colombia)", "Universidad Torcuato Di Tella (Argentina)",
"Singapore Management University (SMU)", "University of California, Santa Cruz (UC Santa Cruz)",
"University of California, San Diego (UC San Diego)", "University of Brasília (UnB)",
"Georgia Institute of Technology (Georgia Tech)", "University of Illinois at Urbana-Champaign (UIUC)",
"Wilfrid Laurier", "Universidad de los Andes Chile")
latitud <- c(42.3736, 42.3601, 37.8719, 42.0555, 41.7897, 37.4275, 42.4470, 39.9526, 38.9059, 43.5624, 49.2606,
41.8262, 34.4133, 36.1447, 40.3327, 24.4709, 38.9076, 51.5246, 38.0356, -4.6021, -33.4496, -33.4542,
46.4983, 52.3914, 59.3650, 51.5142, -23.5619, -23.5842, -33.4394, 40.7982, -25.4275, 41.8696, 19.3600,
-4.6021, -33.4542, 4.6368, -33.4418, -4.6020, 38.9072, 39.3299, 50.8798, 51.5194, 43.0761, 47.6435,
-12.0810, 10.4880, -33.4504, 38.8318, -33.4458, -4.5981, -6.2004, -34.5328, 1.2966, 36.9915, 32.8801,
-15.7644, 33.7756, 40.1020, 43.4723, -33.4040)
longitud <- c(-71.1097, -71.0942, -122.2585, -87.6752, -87.5997, -122.1697, -76.4835, -75.1652, -77.0424, 1.4683,
-123.2458, -71.4032, -119.8489, -86.8027, 3.7682, 54.3735, -77.0723, 0.0399, -78.5031, -74.0650,
-70.6646, -70.6342, 11.3543, 13.1287, 18.0697, 0.1165, -46.7300, -46.6721, -70.6505, -77.8599,
-49.2733, -87.6496, -99.1836, -74.0650, -70.6342, -74.0825, -70.6541, -74.0650, -77.0369, -76.6205,
4.7005, 0.1270, -89.4125, -122.1306, -77.0244, -66.8792, -70.6565, -77.3110, -70.6250, -74.0760,
-75.5788, -58.5039, 103.8522, -122.0609, -117.2340, -47.8681, -84.3963, -88.2272, -80.5449, -70.5075)
# Crear el dataframe
df <- data.frame(university = university,
latitud = latitud,
longitud = longitud)
# Mostrar el dataframe
print(df)
data <- merge(db, df, by = "university", all = T)
# Crear un nuevo vector de países corregido
# Crear un nuevo vector de países corregido
# Crear un nuevo vector de países corregido
countries_corrected <- c("United States", "United States", "United States", "United States", "United States", "United States", "United States", "United States", "United States", "France", "Canada", "United States",
"United States", "United States", "Spain", "UAE", "United States", "United Kingdom", "United States", "Colombia", "Chile", "Chile", "Italy",
"Germany", "Sweden", "United Kingdom", "Brazil", "Brazil", "Chile", "United States", "United States", "Mexico", "Colombia",
"Chile", "Chile", "Italy", "United States", "Belgium", "United Kingdom", "United States", "United States", "United States", "Peru",
"United States", "Chile", "United States", "Chile", "Colombia", "Argentina", "Singapore",
"United States", "United States", "Brazil", "United States", "United States", "Colombia", "Canada")
# Verificar la longitud del nuevo vector de países
length(countries_corrected)
# Crear el data frame
universities_df <- data.frame(university = university, country = countries, countries_corrected)
# Agregar la columna de continente
universities_df$continent <- countrycode(universities_df$country, "country.name", "continent")
db <- universities_df %>%
mutate(continent  = if_else(is.na(continent), "Americas", continent))
# Definir los datos de la tabla como vectores
university <- c("Harvard", "MIT", "UC Berkeley", "Northwestern", "Chicago", "Stanford", "Cornell",
"UPenn-Wharton", "IADB", "Toulouse", "UBC", "Brown", "UC Santa Barbara",
"Vanderbilt", "Carlos III", "NYU Abu Dhabi", "Georgetown", "Queen Mary",
"Virginia", "Pontificia Universidad Católica de Chile", "Pontificia Universidad Católica de Chile", "Universidad de Chile",
"Free University of Bozen-Bolzano", "University of Potsdam", "Stockholm University",
"London School of Economics and Political Science (LSE)", "University of São Paulo (USP)",
"Insper", "Universidad Diego Portales", "Pennsylvania State University",
"Federal University of Paraná (UFPR)", "University of Illinois at Chicago (UIC)",
"Instituto Tecnológico Autónomo de México (ITAM)", "Universidad de los Andes (Colombia)",
"Pontificia Universidad Católica de Chile",  # Aquí eliminamos la duplicación
"Central Bank of Colombia", "Central Bank of Chile", "Los Andes (Colombia)",
"World Bank", "Johns Hopkins University", "KU Leuven (Katholieke Universiteit Leuven)",
"London Business School", "University of Wisconsin-Madison", "Microsoft Corporation",
"Universidad del Pacífico (Peru)", "Development Bank of Latin America (CAF)",
"3IE - USM", "George Mason University",
"Universidad Adolfo Ibáñez (UAI)", "Universidad del Rosario (Colombia)",
"Universidad EAFIT (Colombia)", "Universidad Torcuato Di Tella (Argentina)",
"Singapore Management University (SMU)", "University of California, Santa Cruz (UC Santa Cruz)",
"University of California, San Diego (UC San Diego)", "University of Brasília (UnB)",
"Georgia Institute of Technology (Georgia Tech)", "University of Illinois at Urbana-Champaign (UIUC)",
"Wilfrid Laurier", "Universidad de los Andes Chile")
latitud <- c(42.3736, 42.3601, 37.8719, 42.0555, 41.7897, 37.4275, 42.4470, 39.9526, 38.9059, 43.5624, 49.2606,
41.8262, 34.4133, 36.1447, 40.3327, 24.4709, 38.9076, 51.5246, 38.0356, -4.6021, -33.4496, -33.4542,
46.4983, 52.3914, 59.3650, 51.5142, -23.5619, -23.5842, -33.4394, 40.7982, -25.4275, 41.8696, 19.3600,
-4.6021, -33.4542, 4.6368, -33.4418, -4.6020, 38.9072, 39.3299, 50.8798, 51.5194, 43.0761, 47.6435,
-12.0810, 10.4880, -33.4504, 38.8318, -33.4458, -4.5981, -6.2004, -34.5328, 1.2966, 36.9915, 32.8801,
-15.7644, 33.7756, 40.1020, 43.4723, -33.4040)
longitud <- c(-71.1097, -71.0942, -122.2585, -87.6752, -87.5997, -122.1697, -76.4835, -75.1652, -77.0424, 1.4683,
-123.2458, -71.4032, -119.8489, -86.8027, 3.7682, 54.3735, -77.0723, 0.0399, -78.5031, -74.0650,
-70.6646, -70.6342, 11.3543, 13.1287, 18.0697, 0.1165, -46.7300, -46.6721, -70.6505, -77.8599,
-49.2733, -87.6496, -99.1836, -74.0650, -70.6342, -74.0825, -70.6541, -74.0650, -77.0369, -76.6205,
4.7005, 0.1270, -89.4125, -122.1306, -77.0244, -66.8792, -70.6565, -77.3110, -70.6250, -74.0760,
-75.5788, -58.5039, 103.8522, -122.0609, -117.2340, -47.8681, -84.3963, -88.2272, -80.5449, -70.5075)
# Crear el dataframe
df <- data.frame(university = university,
latitud = latitud,
longitud = longitud)
# Mostrar el dataframe
print(df)
data <- merge(db, df, by = "university", all = T)
mymap <- leaflet() %>% addTiles()
mymap <- mymap %>%
addTiles(
'http://otile{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.jpeg',
attribution = 'Institutions <a href="https://economia.uc.cl/2024/04/08/xix-ridge-forum-2024-13-al-17-de-mayo-2024/">RIDGE 2024 - Instituto Economía PUC</a> &mdash; by; <a href="https://valentinaandrade.netlify.app">Valentina Andrade</a>'
) %>% setView(-97, 40, zoom = 4)
mymap %>%
setView( lat=10, lng=0 , zoom=2) %>%
addTiles() %>%
addMarkers(data = data, lng = ~longitud, lat = ~latitud, popup = ~as.character(university),
options = popupOptions(openPopup = TRUE),
icon = list(
iconUrl = 'https://icons.iconarchive.com/icons/icons-land/vista-map-markers/128/Map-Marker-Ball-Pink-icon.png',
iconSize = c(40, 40)
))
library(leaflet)
library(dplyr)
library(maptools)
library(maps)
# Obtener los límites del mapa
# Crear un dataframe con las coordenadas de los países
world <- map("world", plot = FALSE, fill = TRUE)
View(data)
write_excel_csv(data)
write_excel_csv(data.csv)
write_excel_csv(data, "data.csv")
data <- read.csv2("data2.csv")
View(data)
mymap <- leaflet() %>% addTiles()
mymap <- mymap %>%
addTiles(
'http://otile{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.jpeg',
attribution = 'Institutions <a href="https://economia.uc.cl/2024/04/08/xix-ridge-forum-2024-13-al-17-de-mayo-2024/">RIDGE 2024 - Instituto Economía PUC</a> &mdash; by; <a href="https://valentinaandrade.netlify.app">Valentina Andrade</a>'
) %>% setView(-97, 40, zoom = 4)
mymap %>%
setView( lat=10, lng=0 , zoom=2) %>%
addTiles() %>%
addMarkers(data = data, lng = ~longitud, lat = ~latitud, popup = ~as.character(university),
options = popupOptions(openPopup = TRUE),
icon = list(
iconUrl = 'https://icons.iconarchive.com/icons/icons-land/vista-map-markers/128/Map-Marker-Ball-Pink-icon.png',
iconSize = c(40, 40)
))
View(data)
data <- data %>% mutate_at(vars(starts_with("l")), ~ as.numeric(.))
View(data)
mymap <- leaflet() %>% addTiles()
mymap <- mymap %>%
addTiles(
'http://otile{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.jpeg',
attribution = 'Institutions <a href="https://economia.uc.cl/2024/04/08/xix-ridge-forum-2024-13-al-17-de-mayo-2024/">RIDGE 2024 - Instituto Economía PUC</a> &mdash; by; <a href="https://valentinaandrade.netlify.app">Valentina Andrade</a>'
) %>% setView(-97, 40, zoom = 4)
mymap %>%
setView( lat=10, lng=0 , zoom=2) %>%
addTiles() %>%
addMarkers(data = data, lng = ~longitud, lat = ~latitud, popup = ~as.character(university),
options = popupOptions(openPopup = TRUE),
icon = list(
iconUrl = 'https://icons.iconarchive.com/icons/icons-land/vista-map-markers/128/Map-Marker-Ball-Pink-icon.png',
iconSize = c(40, 40)
))
View(data)
# Identificar los nombres de países únicos
nombres_unicos <- unique(data$country)
# Crear una nueva variable en data que contenga los nombres de países únicos
data$country_unico <- data$country
# Asignar los nombres de países únicos a las filas correspondientes
data$country_unico[duplicated(data$country)] <- NA
data <- data %>%
group_by(country) %>%
mutate(num_universidades = n_distinct(university))
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv') %>%
mutate(country = COUNTRY)
df <- left_join(data, df) %>%
mutate(num_uni = if_else(is.na(country_unico), NA_real_, num_universidades))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
fig <- plot_geo(df)
fig <- fig %>% add_trace(
z = ~num_uni, color = ~num_uni, colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
)
fig <- fig %>% colorbar(title = 'GDP Billions US$', tickprefix = '$')
fig <- fig %>% layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
fig
data(GNI2014, package = "treemap")
library(highcharter)
pacman::p_load(highcharter)
data(GNI2014, package = "treemap")
pacman::p_load(highcharter, treemap)
data(GNI2014, package = "treemap")
hcmap(
"custom/world-robinson-lowres",
data = GNI2014,
name = "Gross national income per capita",
value = "GNI",
borderWidth = 0,
nullColor = "#d3d3d3",
joinBy = c("iso-a3", "iso3")
) |>
hc_colorAxis(
stops = color_stops(colors = viridisLite::inferno(10, begin = 0.1)),
type = "logarithmic"
)
View(GNI2014)
View(data)
hcmap(
"custom/world-robinson-lowres",
data = data,
name = "Gross national income per capita",
value = "num:universidades",
borderWidth = 0,
nullColor = "#d3d3d3",
joinBy = c("iso-a3", "iso3")
) %>%
hc_colorAxis(
stops = color_stops(colors = viridisLite::inferno(10, begin = 0.1)),
type = "logarithmic"
)
hcmap(
"custom/world-robinson-lowres",
data = data,
name = "Gross national income per capita",
value = "num:universidades",
borderWidth = 0,
nullColor = "#d3d3d3"
) %>%
hc_colorAxis(
stops = color_stops(colors = viridisLite::inferno(10, begin = 0.1)),
type = "logarithmic"
)
hcmap(
"custom/world-robinson-lowres",
data = data,
name = "Gross national income per capita",
value = "num_universidades",
borderWidth = 0,
nullColor = "#d3d3d3"
) %>%
hc_colorAxis(
stops = color_stops(colors = viridisLite::inferno(10, begin = 0.1)),
type = "logarithmic"
)
?hcmap
hcmap(
"custom/world-robinson-lowres",
data = data,
name = "Number of institutions",
value = "num_universidades",
borderWidth = 0,
nullColor = "#d3d3d3"
) %>%
hc_colorAxis(
stops = color_stops(colors = viridisLite::inferno(10, begin = 0.1)),
type = "logarithmic"
)
View(data)
