labs( x = "", caption = "source: BC") +
transition_states(states = Date, transition_length = 10, state_length = 10) +
ease_aes('linear')
animate(p)
# Create the plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(aes(group = 1),color = "navy", size = 1.5) +
geom_point(color = "navy", size = 2) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +
theme_classic()  +
labs( x = "", caption = "source: BC") +
transition_states(states = Date, transition_length = 10, state_length = 10) +
ease_aes('linear')
animate(p)
# Create the plot
p <- plot_ly(data, x = ~Date, y = ~Uncertainty, type = 'scatter', mode = 'lines+markers', marker = list(size = 10, color = 'navy'), line = list(color = 'navy', width = 2)) %>%
layout(xaxis = list(tickformat = "%m %Y")) %>%
layout(title = "", xaxis = list(title = ""), yaxis = list(title = "Uncertainty"))
library(plotly)
# Convert Date column to Date type
data$Date <- as.Date(data$Date)
# Create the plot
p <- plot_ly(data, x = ~Date, y = ~Uncertainty, type = 'scatter', mode = 'lines+markers', marker = list(size = 10, color = 'navy'), line = list(color = 'navy', width = 2)) %>%
layout(xaxis = list(tickformat = "%m %Y")) %>%
layout(title = "", xaxis = list(title = ""), yaxis = list(title = "Uncertainty"))
p
# Animate the plot
animation <- p %>%
animation_slider(currentvalue = list(prefix = "Date: "))
# Animate the plot
animation <- p %>%
animation_slider(currentvalue = list(prefix = "Date: "))
# Create the plot
p <- plot_ly(data, x = ~Date, y = ~Uncertainty, type = 'scatter', mode = 'lines+markers', marker = list(size = 10, color = 'navy'), line = list(color = 'navy', width = 2)) %>%
layout(xaxis = list(tickformat = "%m %Y")) %>%
layout(title = "", xaxis = list(title = ""), yaxis = list(title = "Uncertainty"))
p
# Animate the plot
animation <- p %>%
add_trace(frame = ~Date)
animation
p
# Animate the plot
animation <- p %>%
add_trace(frame = ~seq_along(Date))
animation
# Animate the plot
animation <- p %>%
animation_opts(frame = ~seq_along(Date)) %>%
animation_slider(currentvalue = list(prefix = "Date: "))
# Animate the plot
animation <- p %>%
animation_opts(frame = ~seq(0, length.out = length(Date) - 1, by = 1)) %>%
animation_slider(currentvalue = list(prefix = "Date: "))
# Convert Date column to Date type
data$Date <- as.Date(data$Date)
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(color = "navy", size = 2) +
geom_point(color = "navy", size = 3) +
scale_x_date(date_labels = "%m %Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
# Animate the plot
animated_plot <- p +
transition_time(Date) +
ease_aes('linear')
# Render the animation
animate(animated_plot, nframes = 100, fps = 10)
# Create frames for animation
frames <- list(
list(data = list(), layout = list(title = "Frame 1")),
list(data = list(), layout = list(title = "Frame 2")),
# Add more frames as needed
)
# Create the plot
p <- plot_ly(data, x = ~Date, y = ~Uncertainty, type = 'scatter', mode = 'lines+markers', marker = list(size = 10, color = 'navy'), line = list(color = 'navy', width = 2)) %>%
layout(xaxis = list(tickformat = "%m %Y")) %>%
layout(title = "", xaxis = list(title = ""), yaxis = list(title = "Uncertainty"))
# Create frames for animation
frames <- list(
list(data = list(), layout = list(title = "Frame 1")),
list(data = list(), layout = list(title = "Frame 2")),
# Add more frames as needed
)
as_tibble(data)
library(plotly)
library(dplyr)
# Convertir a tibble si es necesario
data <- as_tibble(data)
# Crear una columna de tiempo para el índice de los fotogramas
data <- data %>% mutate(TimeFrame = as.integer(as.Date(Date) - min(as.Date(data$Date))))
# Número de fotogramas (cada mes)
num_frames <- max(data$TimeFrame) + 1
# Crear fotogramas
frames <- lapply(0:num_frames, function(i) {
filtered_data <- filter(data, TimeFrame <= i)
list(
data = list(x = ~Date[1:(i+1)], y = ~Uncertainty[1:(i+1)]),
layout = list(title = paste("Frame", i+1))
)
})
# Crear una columna de tiempo para el índice de los fotogramas
data <- data %>% mutate(TimeFrame = as.integer(as.Date(Date) - min(as.Date(data$Date))))
# Número de fotogramas (cada mes)
num_frames <- max(data$TimeFrame) + 1
# Crear fotogramas
frames <- lapply(0:num_frames, function(i) {
filtered_data <- filter(data, TimeFrame <= i)
list(
data = list(x = ~Date[1:(i+1)], y = ~Uncertainty[1:(i+1)]),
layout = list(title = paste("Frame", i+1))
)
})
# Crear el gráfico base
p <- plot_ly()
# Añadir el primer trazo
p <- add_trace(p, data = data, x = ~Date, y = ~Uncertainty, type = 'scatter', mode = 'lines+markers', marker = list(size = 10, color = 'navy'), line = list(color = 'navy', width = 2))
# Añadir fotogramas
for (i in seq_along(frames)) {
p <- add_trace(p, data = frames[[i]]$data, x = frames[[i]]$data$x, y = frames[[i]]$data$y, type = 'scatter', mode = 'lines+markers', marker = list(size = 10, color = 'navy'), line = list(color = 'navy', width = 2))
}
library(plotly)
library(dplyr)
# Convertir a tibble si es necesario
data <- as_tibble(data)
# Crear una columna de tiempo para el índice de los fotogramas
data <- data %>% mutate(TimeFrame = as.integer(as.Date(Date) - min(as.Date(data$Date))))
# Número de fotogramas (cada mes)
num_frames <- max(data$TimeFrame) + 1
# Crear fotogramas
frames <- lapply(0:num_frames, function(i) {
filtered_data <- filter(data, TimeFrame <= i)
list(
data = list(x = ~Date[1:(i+1)], y = ~Uncertainty[1:(i+1)]),
layout = list(title = paste("Frame", i+1))
)
})
# Crear el gráfico base
p <- plot_ly()
# Añadir el primer trazo
p <- add_trace(p, data = data, x = ~Date, y = ~Uncertainty, type = 'scatter', mode = 'lines+markers', marker = list(size = 10, color = 'navy'), line = list(color = 'navy', width = 2))
# Añadir fotogramas
for (i in seq_along(frames)) {
p <- add_trace(p, data = frames[[i]]$data, x = frames[[i]]$data$x, y = frames[[i]]$data$y, type = 'scatter', mode = 'lines+markers', marker = list(size = 10, color = 'navy'), line = list(color = 'navy', width = 2))
}
# Ajustar el diseño
p <- layout(p, xaxis = list(tickformat = "%m %Y"), title = "", xaxis2 = list(title = ""), yaxis2 = list(title = "Uncertainty"))
# Animate the plot
p <- p %>% animation_opts(frame = 1000, redraw = TRUE) %>%
animation_slider(currentvalue = list(prefix = "Frame: "))
# Create the plot
p <- plot_ly(data, x = ~Date, y = ~Uncertainty, type = 'scatter', mode = 'lines+markers', marker = list(size = 10, color = 'navy'), line = list(color = 'navy', width = 2)) %>%
layout(xaxis = list(tickformat = "%m %Y"), title = "", yaxis = list(title = "Uncertainty"))
# Animate the plot
p <- p %>% animation_opts(frame = 1000, redraw = TRUE) %>%
animation_slider(currentvalue = list(prefix = "Frame: "))
# Create the plot
# Create the plot
p <- plot_ly(data, x = ~Date, y = ~Uncertainty, type = 'scatter', mode = 'lines+markers', marker = list(size = 10, color = 'navy'), line = list(color = 'navy', width = 2)) %>%
layout(xaxis = list(tickformat = "%m %Y"), title = "", yaxis = list(title = "Uncertainty"))
# Add animation
p <- p %>% animation_frame(~Date)
# Convert Date column to Date type
data$Date <- as.Date(data$Date)
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(color = "navy", size = 2) +
scale_x_date(date_labels = "%m %Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
p
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(color = "navy", size = 2) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
p
# Animate the plot
animated_plot <- p +
transition_time(Date) +
ease_aes('linear')
# Render the animation
animate(animated_plot, nframes = 100, fps = 10)
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty, group = Uncertainty )) +
geom_line(color = "navy", size = 2) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
p
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty, group = 1)) +
geom_line(color = "navy", size = 2) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
p
# Animate the plot
animated_plot <- p +
transition_time(Date) +
ease_aes('linear')
# Render the animation
animate(animated_plot, nframes = 100, fps = 10)
View(data)
data <- data %>%  select(-TimeFrame) %>% na.omit()
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty, group = 1)) +
geom_line(color = "navy", size = 2) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
p
# Animate the plot
animated_plot <- p +
transition_time(Date) +
ease_aes('linear')
# Render the animation
animate(animated_plot, nframes = 100, fps = 10)
# 1. Load packages --------------------------------------------------------
pacman::p_load(haven, tidyverse, ggsci, "gganimate", "transformr", "gifski", rvest, readxl)
theme_set(theme_minimal() )
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty, group = 1)) +
geom_line(size = 2) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
p
# Animate the plot
animated_plot <- p +
transition_states(Date,
transition_length = 2,
state_length = 1)
animated_plot
ggplot(Cdata, aes(x=as.factor(Date),y=Uncertainty)) +
geom_point(aes(group = seq_along(Date)), color = "orange", size = 4) +
geom_line(alpha = 0.5, aes(group = 1))+
transition_reveal(Date)
ggplot(data, aes(x=as.factor(Date),y=Uncertainty)) +
geom_point(aes(group = seq_along(Date)), color = "orange", size = 4) +
geom_line(alpha = 0.5, aes(group = 1))+
transition_reveal(Date)
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty, group = 1)) +
geom_line(size = 2)  +
theme_classic() +
labs(x = NULL) # Empty x-axis label
p
# Animate the plot
animated_plot <- p +
transition_states(Date,
transition_length = 2,
state_length = 1)
animated_plot
# Create the base plot
p <- ggplot(data, aes(x = as.factor(Date), y = Uncertainty, group = 1)) +
geom_line(size = 2) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
p
# Convert Date column to Date type
data$Date <- as.Date(data$Date)
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty, group = 1)) +
geom_line(aes(group = seq_along(Date)), size = 2) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
p
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(aes(group = seq_along(Date)), size = 2) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
p
data <- read_csv("~/Downloads/Cuadro_13042024210421.csv")
# 1. Load packages --------------------------------------------------------
pacman::p_load(haven, tidyverse, ggsci, "gganimate", "transformr", "gifski", rvest, readxl)
theme_set(theme_minimal() )
# Convert Date column to Date type
data$Date <- as.Date(data$Date)
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(aes(group = seq_along(Date)), size = 2) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
p
data <- read_csv("~/Downloads/Cuadro_13042024210421.csv")
# 1. Load packages --------------------------------------------------------
pacman::p_load(haven, tidyverse, ggsci, "gganimate", "transformr", "gifski", rvest, readxl)
theme_set(theme_minimal() )
# Convert Date column to Date type
data$Date <- as.Date(data$Date)
data <- read.csv2("~/Downloads/Cuadro_13042024210421.csv")
# 1. Load packages --------------------------------------------------------
pacman::p_load(haven, tidyverse, ggsci, "gganimate", "transformr", "gifski", rvest, readxl)
theme_set(theme_minimal() )
# Convert Date column to Date type
data$Date <- as.Date(data$Date)
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(aes(group = seq_along(Date)), size = 2) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
# Create the base plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(aes(group = seq_along(Date)), size = 2) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +
theme_classic() +
labs(x = NULL) # Empty x-axis label
p
# Create a new variable with formatted date
data$my <- format(data$Date, "%b-%Y")
# Create the base plot
p <- ggplot(data, aes(x = as.factor(my), y = Uncertainty, group = 1)) +
geom_line(size = 2) +
theme_classic() +
labs(x = "")
p
View(data)
# Create a new variable with formatted date
data$my <- format(data$Date, "%m-%Y")
# Create the base plot
p <- ggplot(data, aes(x = as.factor(my), y = Uncertainty, group = 1)) +
geom_line(size = 2) +
theme_classic() +
labs(x = "")
p
data <- read.csv2("~/Downloads/Cuadro_13042024210421.csv")
data <- read.csv2("~/Downloads/Cuadro_13042024210421.csv")
# 1. Load packages --------------------------------------------------------
pacman::p_load(haven, tidyverse, ggsci, "gganimate", "transformr", "gifski", rvest, readxl)
theme_set(theme_minimal() )
# Convert Date column to Date type
data <- data %>%
mutate(Date = as.Date(Date),
my = paste(month(Date), year(Date), sep = "-"))
# Convert Date column to Date type
data <- data %>%
mutate(Date = as.Date(Date),
my = paste(month(Date), year(Date), sep = "-"))
View(data)
# Create the base plot
p <- ggplot(data, aes(x = as.factor(my), y = Uncertainty, group = 1)) +
geom_line(size = 2) +
theme_classic() +
labs(x = "")
p
data <- read.csv2("~/Downloads/Cuadro_13042024210421.csv")
# Create the base plot
p <- ggplot(data, aes(x = as.factor(my), y = Uncertainty, group = 1)) +
geom_line(size = 2) +
theme_classic() +
labs(x = "")
p
data <- read.csv2("~/Downloads/Cuadro_13042024210421.csv")
# Convert Date column to Date type
data <- data %>%
mutate(Date = as.Date(Date),
my = paste(month(Date), year(Date), sep = "-"))
# Create the base plot
p <- ggplot(data, aes(x = as.factor(my), y = Uncertainty, group = 1)) +
geom_line(size = 2) +
theme_classic() +
labs(x = "")
p
# Convert Date column to Date type
data <- data %>%
mutate(Date = as.Date(Date),
my = paste(month(Date), year(Date), sep = "-")) %>%
na.omit()
# Create the base plot
p <- ggplot(data, aes(x = as.factor(my), y = Uncertainty, group = 1)) +
geom_line(size = 2) +
theme_classic() +
labs(x = "")
p
ggplot(data, aes(x = Date, y = Uncertainty, group = 1)) +
geom_line(size = 2) +
theme_classic() +
labs(x = "")
ggplot(data, aes(x=as.factor(Date),y=Uncertainty)) +
geom_point(aes(group = seq_along(Date)), color = "orange", size = 4) +
geom_line(alpha = 0.5, aes(group = 1))+
transition_reveal(Date)
ggplot(data, aes(x=as.factor(Date),y=Uncertainty)) +
geom_point(aes(group = seq_along(Date)), color = "navy", size = 3) +
geom_line(alpha = 0.5, size = 2, color = "navy", aes(group = 1))+
transition_reveal(Date) +
scale_x_discrete(labels = function(x) pretty(x, n = 6))
ggplot(data, aes(x=as.factor(Date),y=Uncertainty)) +
geom_point(aes(group = seq_along(Date)), color = "navy", size = 3) +
geom_line(alpha = 0.5, size = 2, color = "navy", aes(group = 1))+
transition_reveal(Date) +
scale_x_discrete(labels = function(x) {x[seq(1, length(x), by = 6)]})
# Convert Date column to Date type
data$Date <- as.Date(data$Date)
# Create the plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(color = "navy", size = 2) +
geom_point(color = "navy", size = 3) +
theme_classic() +
labs(x = NULL, y = "Uncertainty") # Empty x-axis label
# Animate the plot
animated_plot <- p +
transition_reveal(Date) +
scale_x_date(date_labels = "%m %Y", date_breaks = "6 months") + # Format month as number
labs(title = "Date: {frame_time}") # Show frame time in title
# Render the animation
animate(animated_plot)
# Animate the plot
animated_plot <- p +
transition_reveal(Date) +
scale_x_date(date_labels = "%m %Y", date_breaks = "6 months") + # Format month as number
labs(title = "{format(frame_time, '%m %Y')}") # Show month and year in title
# Render the animation
animate(animated_plot)
# Animate the plot
animated_plot <- p +
transition_reveal(Date) +
scale_x_date(date_labels = "%m %Y", date_breaks = "6 months") + # Format month as number
labs(title = "{closest_state}") # Show month and year in title
# Render the animation
animate(animated_plot)
# Create the plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(color = "navy", size = 2) +
geom_point(color = "navy", size = 3) +
theme_classic() +
labs(x = NULL, y = "Uncertainty", title = "{closest_state}") # Empty x-axis label
# Animate the plot
animated_plot <- p +
transition_reveal(Date) +
scale_x_date(date_labels = "%m %Y", date_breaks = "6 months") # Format month as number
# Render the animation
animate(animated_plot)
# Render the animation
animate(animated_plot, fps = 5)
# Create the plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(color = "navy", size = 2) +
geom_point(color = "navy", size = 3) +
theme_classic() +
labs(x = NULL, y = "Uncertainty", title = "{closest_state}") +
transition_reveal(Date) +
scale_x_date(date_labels = "%m %Y", date_breaks = "6 months") # Format month as number
# Render the animation
animate(p, fps = 5)
# Create the plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(color = "navy", size = 2) +
geom_point(color = "navy", size = 3) +
theme_classic() +
labs(x = NULL, y = "Uncertainty", title = "{format(frame_time, '%m %Y')}") +
transition_reveal(Date) +
scale_x_date(date_labels = "%m %Y", date_breaks = "6 months") # Format month as number
# Render the animation
animate(p, fps = 6) # fps ajusta que tan rapido se ve
# Create the plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(color = "navy", size = 2) +
geom_point(color = "navy", size = 3) +
theme_classic() +
labs(x = NULL, y = "Uncertainty") +
transition_reveal(Date) +
scale_x_date(date_labels = "%m %Y", date_breaks = "6 months") # Format month as number
# Render the animation
animate(p, fps = 6) # fps ajusta que tan rapido se ve
anim_save("rau_graph.gif",
animation = p, renderer = gifski_renderer(),
width = 800, height = 600)
getwd()
# Create the plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(color = "navy", size = 2) +
geom_point(color = "navy", size = 3) +
theme_classic() +
labs(x = NULL, y = "Uncertainty") +
transition_reveal(Date) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") + # Format month as number
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12), element_text(size = 12))
# Create the plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(color = "navy", size = 2) +
geom_point(color = "navy", size = 3) +
theme_classic() +
labs(x = NULL, y = "Uncertainty") +
transition_reveal(Date) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") + # Format month as number
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
text =element_text(size = 12))
# Create the plot
p <- ggplot(data, aes(x = Date, y = Uncertainty)) +
geom_line(color = "navy", size = 2) +
geom_point(color = "navy", size = 3) +
theme_classic() +
labs(x = NULL, y = "Uncertainty") +
transition_reveal(Date) +
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") + # Format month as number
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
text =element_text(size = 12))
# Render the animation
animate(p, fps = 6) # fps ajusta que tan rapido se ve
anim_save("rau_graph.gif", fps = 6,
animation = p, renderer = gifski_renderer(),
width = 800, height = 600)
